#!/usr/bin/perl
#
# SAPHanaSR-testDriver
# (c) 2014 SUSE Linux Products GmbH, Nuremberg, Germany
# (c) 2015 SUSE Linux GmbH, Nuremberg, Germany
# Author: Fabian Herschel
# License: GPL v2+
# Version: 0.9.2015.05.07.1-scale-out
#
##################################################################
# THIS PROGRAM IS NOT INTENDED TO RUN IN PRODUCTIVE ENVIRONMENTS
# AS IT TESTS THE FUNCTIONALITY OF THE SAPHanaSR RESOURCE AGENTS
# THEIRFORE IT STOPS, KILLS AND EVEN MORE SAP HANA INSTANCES AND
# ALSO SHUTDOWN, FENCES OR BLOCK CLUSTER NODES
##################################################################

use POSIX;
use strict;
use Sys::Syslog;
use Sys::Hostname;
use File::Path;
use Switch;
use Getopt::Long;
use SAPHanaSRTools;

###################################
## this part is not for scale up and currently NOT zero-config

my $ClusterNodes=6;
my $ClusterPrimaries=1;
my $ClusterSecondaries=1;

my %Name;
my $host = hostname();
my %Host;
my %Site;
my %Global;
my %HName;
my %SName;
my %GName;

my $varlib='/var/lib/SAPHanaTD';
my $testfile='SAPHanaTD.status';
my $testcount=0;
my $testCase=0;
my $msl;
my $first_test=1;
my $sid;
my $ino;
my $testCase;

	my $result = GetOptions ("sid=s" => \$sid,
	                      "ino=s" => \$ino,
	                      "nodes=s" => \$ClusterNodes,
	                      "case=s" => \$testCase,
		 );


    my $message;
    my $phost;
    my $shost;
    my $sSite="";
    my $pSite="";

sub init()
{
    mkpath($varlib, { mode => 0700, });
    open(STATFILE, "<", "$varlib/$testfile");
    while (<STATFILE>) {
      if ( /^testnr=(.+)/ ) {
         $testcount=$1;
      }
    }
    $msl="msl_";
    #$msl="msl_SAPHana_SLE_HDB00";
#crm resource list
# stonith_fscs98 (stonith:external/ipmi):        Started
# stonith_fscs99 (stonith:external/ipmi):        Started
# rsc_ip_SLE_HDB00       (ocf::heartbeat:IPaddr2):       Started
# Master/Slave Set: msl_SAPHana_SLE_HDB00 [rsc_SAPHana_SLE_HDB00]
    open crmRList, "crm resource list |";
    while (<crmRList>) {
        #printf "%s", $_;
        if (/^\s*Master.Slave Set:\s+(\S+)\s+/) {
           printf "master-slave resource found: <%s>\n", $1;
           $msl=$1;
        }
    }
    close crmRList;
    close STATFILE;
    return 0;
}

my $ident = "fhTD";
my $logopt = "pid";
my $facility = "LOCAL0";
my $priority = "info";

openlog $ident, $logopt, $facility;       # don't forget this
my $sid="";
my $INr="";

( $sid, $INr ) = get_sid_and_InstNr();


sub run_test_stop_hana( $ $ $ )
{
    my $sid=shift;
    my $theHost=shift;
    my $testNr=shift;
    my $rc=0;
       my $SID=toupper($sid);
    mysyslog $priority, "%s", "TEST Try to stop HDB at $theHost test=$testNr";
    if ( $theHost eq $host ) {
       # local
	    mysyslog $priority, "%s", "TEST su - ${sid}adm -c \"HDB stop\" test=$testNr";
       system("su - ${sid}adm -c \"HDB stop\"");
    } else {
            mysyslog $priority, "%s", "TEST ssh ${sid}adm\@$theHost HDB stop test=$testNr";
       # remote
       system("ssh ${sid}adm\@$theHost \"/usr/sap/$SID/HDB$INr/HDB stop\"");
    }
    mysyslog $priority, "%s", "TEST Stopped HDB at $theHost test=$testNr";
    return $rc;
}

sub run_test_stop_hana_system( $ $ $ )
{
    my $sid=shift;
    my $theHost=shift;
    my $testNr=shift;
    my $rc=0;
       my $SID=toupper($sid);
    mysyslog $priority, "%s", "TEST Try to stop HANA SYSTEM at $theHost test=$testNr";
    if ( $theHost eq $host ) {
       # local
	    mysyslog $priority, "%s", "TEST su - ${sid}adm -c \"sapcontrol -nr $INr -function StopSystem\" test=$testNr";
       system("su - ${sid}adm -c \"sapcontrol -nr $INr -function StopSystem\"");
    } else {
            mysyslog $priority, "%s", "TEST ssh ${sid}adm\@$theHost sapcontrol -nr $INr -function StopSystem test=$testNr";
       # remote
       system("ssh ${sid}adm\@$theHost \"/usr/sap/$SID/HDB$INr/exe/sapcontrol -nr $INr -function StopSystem\"");
    }
    mysyslog $priority, "%s", "TEST Stopped HDB at $theHost test=$testNr";
}

sub run_test_kill_hana( $ $ $ $ )
{
    my $sid=shift;
    my $theHost=shift;
    my $testNr=shift;
    my $signal=shift;
    my $rc=0;
       my $SID=toupper($sid);
    mysyslog $priority, "%s", "TEST Try to kill-$signal HDB at $theHost test=$testNr";
    if ( $theHost eq $host ) {
       # local
	    mysyslog $priority, "%s", "TEST su - ${sid}adm -c \"HDB kill-$signal\" test=$testNr";
       system("su - ${sid}adm -c \"HDB kill-$signal\"");
    } else {
       # remote
            mysyslog $priority, "%s", "TEST ssh ${sid}adm\@$theHost bash -lc \"HDB kill-$signal\" test=$testNr";
       system("ssh ${sid}adm\@$theHost \"/usr/sap/$SID/HDB$INr/HDB kill-$signal\"");
    }
    mysyslog $priority, "%s", "TEST Killed HDB at $theHost test=$testNr";
    return $rc;
}

sub run_test_standby_node( $ $ $ )
{
    my $sid=shift;
    my $node=shift;
    my $testNr=shift;
    my $rc=0;
    if ( get_nodes_online() == 2 ) {
        mysyslog $priority, "%s", "Try standby $node test=$testNr";
        system("crm node standby $node");
        while ( get_nodes_online() != 1 ) {
            mysyslog $priority, "%s", "Wait for standby status for $node test=$testNr";
            sleep 10;
        }
        mysyslog $priority, "%s", "Set standby for $node test=$testNr";
        # TODO: We should wait till S_IDLE - for now we wait for 3 minutes
        mysyslog $priority, "%s", "sleeping 180s test=$testNr";
        sleep 180;
        mysyslog $priority, "%s", "Try set online for $node test=$testNr";
        system("crm node online $node");
        while ( get_nodes_online() != 2 ) {
            mysyslog $priority, "%s", "Wait for online status for $node test=$testNr";
            sleep 10;
        }
        mysyslog $priority, "%s", "Set online for $node test=$testNr";
    }
    return $rc;
}

sub run_test_stop_masterslave( $ $ )
{
    my $msl=shift;
    my $testNr=shift;
    mysyslog $priority, "%s", "Try stop msl $msl test=$testNr";
    system("crm resource stop $msl");
    mysyslog $priority, "%s", "sleeping 180s test=$testNr";
    sleep 180;
    mysyslog $priority, "%s", "Try start msl $msl test=$testNr";
    system("crm resource start $msl");
    return 0;
}

sub run_testCase($)
{
    use Switch;
    my $testCase=shift;
    switch ($testCase) {
        case [1] {
            mysyslog $priority, "%s", "Testcase $testCase: Kill-2 primary SAP Hana instance. test=$testcount";
            run_test_kill_hana($sid, $phost, $testcount, 2);
        }
        case [2] {
            mysyslog $priority, "%s", "Testcase $testCase: Kill-2 secondary SAP Hana instance. test=$testcount";
            run_test_kill_hana($sid, $shost, $testcount, 2);
        }
        case [3] {
            mysyslog $priority, "%s", "Testcase $testCase: Kill-11 primary SAP Hana instance. test=$testcount";
            run_test_kill_hana($sid, $phost, $testcount, 11);
        }
        case [4] {
            mysyslog $priority, "%s", "Testcase $testCase: Kill-11 secondary SAP Hana instance. test=$testcount";
            run_test_kill_hana($sid, $shost, $testcount, 11);
        }
        case [5] {
            mysyslog $priority, "%s", "Testcase $testCase: Stop secondary SAP Hana instance. test=$testcount";
            run_test_stop_hana($sid, $shost, $testcount);
        }
        case [6] {
            mysyslog $priority, "%s", "Testcase $testCase: Stop primary SAP Hana instance. test=$testcount";
            run_test_stop_hana($sid, $phost, $testcount);
        } # maybe add max wished test time till good again?
        case [7] {
            mysyslog $priority, "%s", "Testcase $testCase: Kill-9 primary SAP Hana instance. test=$testcount";
            run_test_kill_hana($sid, $phost, $testcount, 9);
        }
        case [8] {
            mysyslog $priority, "%s", "Testcase $testCase: Kill-9 secondary SAP Hana instance. test=$testcount";
            run_test_kill_hana($sid, $shost, $testcount, 9);
        }
        case [9] {
            mysyslog $priority, "%s", "Testcase $testCase: standby node with secondary SAP Hana instance. test=$testcount";
            run_test_standby_node($sid, $shost, $testcount);
        }
        case [10] {
            mysyslog $priority, "%s", "Testcase $testCase: standby node with primary SAP Hana instance. test=$testcount";
            run_test_standby_node($sid, $phost, $testcount);
        }
        case [11] {
            mysyslog $priority, "%s", "Testcase $testCase: stop and start master/slave";
            run_test_stop_masterslave($msl, $testcount);
        }
        case [12] {
            mysyslog $priority, "%s", "Testcase $testCase: Primary: StopSystem. test=$testcount";
            run_test_stop_hana_system($sid, $phost, $testcount);
        }
        else   {
            mysyslog $priority, "%s", "Uncovered test case number";}
        }
}

init();
mysyslog $priority, "fhTD: Tests running. Next TestNr=%i", $testcount;
my $goodloops=0;
my $badloops=0;
my $testActive=0;
while ( 1==1 ) {
    get_hana_attributes($sid);
    $phost=get_host_primary($sid, "1234");
    $shost=get_host_secondary($sid, "1234");
    $pSite=get_site_by_host($sid, $phost);
    $sSite=get_site_by_host($sid, $shost);
    my ($checkOK, $failures ) = check_all_ok($sid, $ClusterNodes);
    if ( ( $checkOK == 0 ) && ( $testActive==0 ) ) {
        #
        # OK back again after it failed
        #
        $badloops=0;
        $goodloops++;
        $message="All checks passed - primary=$phost ($pSite) secondary=$shost ($sSite) loop=$goodloops testnr=$testcount";
        mysyslog $priority, "%s", $message;
        if ( ( $goodloops >= 12 ) || ( $first_test == 1 )  ) {
            $testcount++;
            $first_test=0;
            # TODO: Later add other values for writing the status file (now only testnr)
            $message="STATUS primary=$phost ($pSite) secondary=$shost ($sSite) testnr=$testcount";
            mysyslog $priority, "%s", $message;
            open(STATFILE, ">", "$varlib/$testfile");
            printf STATFILE "testnr=%i\n", $testcount;
            close STATFILE;
            my $maxTestCase=10;
            # $testCase=$testcount % $maxTestCase + 1 ;
            #$testCase=1;
            run_testCase($testCase);
            $testActive=1;
            $goodloops=0;
        }
    } elsif ( ( $checkOK == 0 ) && ( $testActive==1 ) ) {
        #
        # STILL OK after a test, so cluster did not already catched the problem
        #
        $goodloops++;
        $message="Still all checks passed - primary=$phost ($pSite) secondary=$shost ($sSite) loop=$goodloops testnr=$testcount";
        mysyslog $priority, "%s", $message;
    } else {
        $goodloops=0;
        $badloops++;
        $testActive=0;
        if ( $checkOK == 1 ) {
		$message="$checkOK check failed ($failures) - primary=$phost ($pSite) secondary=$shost ($sSite) loop=$badloops test=$testcount";
        } else {
		$message="$checkOK checks failed ($failures) - primary=$phost ($pSite) secondary=$shost ($sSite) loop=$badloops test=$testcount";
        }
        mysyslog $priority, "%s", $message;
    }
    sleep 10;
}

#$oldmask = setlogmask $mask_priority;
closelog;
